spring:
  main:
    allow-circular-references: true

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:tcp://localhost/~/test
    username: sa
    password:


  jpa:
    # 스키마를 생성하고 어플리케이션이 종료시 삭제
#    hibernate:
#      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        user_sql_cooments: true


  security:
    oauth2:
      client:
        registration:
          google: # /oauth2/authorization/google 이 주소를 동작하게 한다.
            client-id: 402641556061-ansf2v8fmnqb3udf1o83b63igvbkllrj.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile

          facebook:
            client-id: 584030913270431
            client-secret: af4e5946ce1161da7526d49acf11ed0e
            scope:
              - email
              - public_profile

          # 네이버는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
          # 요청주소도 다르고, 응답 데이터도 다르기 때문이다.
          naver:
            client-id: Q7psmTxJP9YKnoESgzwv
            client-secret: ih7oECqWxT
            scope:
              - name
              - email
              - profile_image
            client-name: Naver # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원정보를 json의 response 키값으로 리턴해줌.



logging:
  level:
    org:
      apache:
        coyote:
          http11: debug

      hiberante:
        SQL: debug

    boardexample:
      myboard: info
